package com.microservice.controller;

import java.io.IOException;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;



/*
@RestController
public class DbClient 
{
@Autowired
private LoadBalancerClient loadBalancer;
@RequestMapping(value="/home",method=RequestMethod.GET)
public String getEmployee()
{
	ServiceInstance si=loadBalancer.choose("DB-Producer");
	System.out.println(si.getUri());
String baseUrl=si.getUri().toString()+"/";

RestTemplate restTemplate=new RestTemplate();
ResponseEntity<String>response=null;
try
{
response=restTemplate.exchange(baseUrl,HttpMethod.GET,getHeaders(),String.class);
}
catch(Exception e)
{
	System.out.println(e);
}
System.out.println(response.getBody());
return response.getBody();
}
private static HttpEntity<?>getHeaders() throws IOException
{
HttpHeaders headers=new HttpHeaders();
headers.set("Accept",MediaType.APPLICATION_JSON_VALUE);
return new HttpEntity<>(headers);
}
}*/

@RestController
public class DbClient 
{
    @Autowired
    //private LoadBalancerClient loadBalancer;
    private DiscoveryClient discoveryClient;
    private static Logger logger;
    
    static {
        try {   
               // you need to do something like below instaed of Logger.getLogger(....);
                logger = LogManager.getLogger(DbClient.class); 
          } catch (Throwable th) {
                th.printStackTrace();
        }
    }

    @RequestMapping("/home")
    public Object getOdi()
    {
    	logger.info("Inside the microservice");
        List<ServiceInstance> instances=discoveryClient.getInstances("DB-Producer");
        ServiceInstance serviceInstance=(ServiceInstance) instances.get(0);
        //ServiceInstance serviceInstance=loadBalancer.choose("DB-Producer");
        String baseUrl=serviceInstance.getUri().toString()+"/";
        RestTemplate restTemplate=new RestTemplate();
        ResponseEntity<String> response=null;
        try
        {
            response=restTemplate.exchange(baseUrl,HttpMethod.GET, getHeaders(), String.class);                                                
        }
        catch (Exception ex)
        {
        	logger.error(response.getBody());            
        }
        
        return  response.getBody();
    }
    public HttpEntity<?> getHeaders()
    {
        HttpHeaders headers=new HttpHeaders();
        headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
        return new HttpEntity<>(headers);              
    }
}

